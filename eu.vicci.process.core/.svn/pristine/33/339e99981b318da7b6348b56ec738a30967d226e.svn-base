package eu.vicci.process.client.core;

import java.util.List;
import java.util.Map;

import eu.vicci.process.engine.core.IProcessInfo;
import eu.vicci.process.engine.core.IProcessInstanceInfo;
import eu.vicci.process.engine.core.IProcessManager;
import eu.vicci.process.model.sofia.Process;
import eu.vicci.process.model.sofia.ProcessStep;
import eu.vicci.process.model.sofiainstance.DataTypeInstance;
import eu.vicci.process.model.sofiainstance.ProcessInstance;
import eu.vicci.process.model.sofiainstance.ProcessStepInstance;
import eu.vicci.process.model.util.messages.core.IHumanTaskRequest;
import eu.vicci.process.model.util.messages.core.IMessageReceiver;
import eu.vicci.process.model.util.messages.core.IStateChangeMessage;
import eu.vicci.process.model.util.messages.core.MessageType;

public interface IProcessEngineClient extends IProcessManager{

	/**
	 * Connect to server
	 * @return
	 */

	public boolean connect();
	
	/**
	 * closes the connection
	 */
	public void close();

	/**
	 * Upload a process model document (either *.sofia or *.diagram)
	 */

	public String uploadProcessDefinition(String processid, String processdocument, boolean isDiagram);

	/**
	 * Deploy a process, i.e. create objects from model document
	 */

	public String deployProcess(String processid);

	/**
	 * Deploy a process instance, i.e. create and prepare an instance for execution
	 */

	public String deployProcessInstance(String processId);

	/**
	 * Configure a process instance
	 */

	public String configureProcessInstance(String processInstanceId, String configuration);

	/**
	 * Start a process instance
	 */

	public String startProcessInstance(String processInstanceId, String processId,
			Map<String, DataTypeInstance> inputParameters);

	/**
	 * Stop a process instance
	 */

	public String stopProcessInstance(String processInstanceId);

	/**
	 * Pause a process instance
	 */

	public String pauseProcessInstance(String processInstanceId);

	/**
	 * Resume a process instance
	 */

	public String resumeProcessInstance(String processInstanceId);

	/**
	 * Returns the serialized process model
	 */

	public String getProcessDefinition(String processid);

	/**
	 * Returns a list of uploaded (undeployed) process models (their ids)
	 */

	public List<String> listUploadedProcessDefinitions();

	/**
	 * Returns a list of deployed process models (in memory of engine) with additional information according to the ProcessInfo class
	 */

	public List<IProcessInfo> listDeployedProcesses();

	/**
	 * Returns a process object
	 */

	public Process getProcessInfos(String processId);

	/**
	 * Returns a process instance object (currently not working)
	 */

	public ProcessInstance getProcessInstanceInfos(String processInstanceId);


	/**
	 * Returns a list of existing process instances and additional information according to the ProcessInstanceInfo class
	 */

	public List<IProcessInstanceInfo> listProcessInstances();

	/**
	 * Uploads a process model from a local file
	 */

	public String uploadModelFile(String filepath);

	/**
	 * Deploys a local process object on the engine
	 */

	public String deployProcess(Process process);

	public String removeInstance(String processInstanceId);

	public String uploadAndDeploy(Process process);

	public IStateChangeMessage getInstanceState(String processInstanceId);

	public List<IStateChangeMessage> getInstanceLog(String processInstanceId);

	public List<IStateChangeMessage> getRecentStateChanges();

	public ProcessStepInstance executeProcessStep(ProcessStepInstance psi, ProcessStep ps,
			boolean alreadyExecuting);

	public String registerProcessExecutionClient();

	public String getUuid();

	public String getIp();

	public void setIp(String ip);

	public String getPort();

	public void setPort(String port);

	public boolean isServer();

	public void setServer(boolean server);

	public void subscribeTo(String topic, MessageType messageType, IMessageReceiver reiceiver);

	public String getName();

	public void setName(String name);

	public void publish(String topic, Object payload);

	public void publishHumanTask(IHumanTaskRequest payload);

}