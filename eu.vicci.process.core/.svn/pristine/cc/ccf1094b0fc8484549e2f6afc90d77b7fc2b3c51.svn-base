package eu.vicci.process.engine.core;

import java.util.List;
import java.util.Map;

import eu.vicci.process.client.core.AbstractClientBuilder;
import eu.vicci.process.client.core.IProcessEngineClient;
import eu.vicci.process.model.sofia.Process;
import eu.vicci.process.model.sofia.ProcessStep;
import eu.vicci.process.model.sofiainstance.DataTypeInstance;
import eu.vicci.process.model.sofiainstance.ProcessInstance;
import eu.vicci.process.model.sofiainstance.ProcessStepInstance;
import eu.vicci.process.model.util.messages.core.HumanTaskRequestListener;
import eu.vicci.process.model.util.messages.core.IHumanTaskRequest;
import eu.vicci.process.model.util.messages.core.IStateChangeMessage;
import eu.vicci.process.model.util.messages.core.StateChangeListener;

public interface IProcessManager {
	String uploadProcessDefinition(String processid, String processdocument, boolean isDiagram);

	String uploadProcessDefinition(String processid, String processdocument, boolean isDiagram,
			boolean overrideExisting);

	String uploadAndDeploy(Process process);

	String deployProcess(String processid);

	String deployProcessInstance(String processId);

	String configureProcessInstance(String processInstanceId, String configuration);

	String startProcessInstance(String processInstanceId, String processId,
			Map<String, DataTypeInstance> inputParameters);

	/**
	 * Starts a process instance and runs the given process in a loop. This means, if the process
	 * reaches the state 'executed', the process is started in a new process instance. While a
	 * process is running, the follower is deployed.
	 * 
	 * @param processInstanceId
	 * @param processId
	 * @param inputParameters
	 * @param runInLoop
	 * @return
	 */
	String startProcessInstance(String processInstanceId, String processId,
			Map<String, DataTypeInstance> inputParameters, boolean runInLoop);

	String stopProcessInstance(String processInstanceId);

	String pauseProcessInstance(String processInstanceId);

	String resumeProcessInstance(String processInstanceId);

	String getProcessDefinition(String processid);

	List<String> listUploadedProcessDefinitions();

	List<IProcessInfo> listDeployedProcesses();

	Process getProcessInfos(String processId);

	ProcessInstance getProcessInstanceInfos(String processInstanceId);

	/**
	 * Returns reduced information with respect a process instance, i.e. a map of all process step
	 * instances - a mapping of their instance-ids to their corresponding model-ids
	 */
	Map<String, String> getProcessInstanceInfosReduced(String processInstanceId);

	List<IProcessInstanceInfo> listProcessInstances();

	String uploadModelFile(String filepath);

	String deployProcess(Process process);

	String removeInstance(String processInstanceId);

	IStateChangeMessage getInstanceState(String processInstanceId);

	List<IStateChangeMessage> getInstanceLog(String processInstanceId);

	List<IStateChangeMessage> getRecentStateChanges();

	ProcessStepInstance executeProcessStep(ProcessStepInstance psi, ProcessStep ps, boolean alreadyExecuting);

	void loadExistingModels();

	Map<String, String> getUploadedProcesses();

	/**
	 * Register {@link StateChangeListener}s which receiving all {@link IStateChangeMessage}s.
	 * 
	 * @param stateChangeListener
	 */
	void addStateChangeListener(StateChangeListener stateChangeListener);

	/**
	 * Removes a {@link StateChangeListener}.
	 * 
	 * @param stateChangeListener
	 */
	void removeStateChangeListener(StateChangeListener stateChangeListener);

	/**
	 * Register a {@link HumanTaskRequestListener} which receives all {@link IHumanTaskRequest}s
	 * 
	 * @param humanTaskRequestListener
	 */
	void addHumanTaskRequestListener(HumanTaskRequestListener humanTaskRequestListener);

	/**
	 * Removes a {@link HumanTaskRequestListener}
	 * 
	 * @param humanTaskRequestListener
	 */
	void removeHumanTaskRequestListener(HumanTaskRequestListener humanTaskRequestListener);

	/**
	 * Sets the {@link ClientBuilderFactory} which creates a {@link AbstractClientBuilder} to create
	 * a new {@link IProcessEngineClient}
	 * 
	 * @param factory
	 */
	void setClientBuilderFactory(ClientBuilderFactory factory);

	/**
	 * Creates a new {@link AbstractClientBuilder} to create a new {@link IProcessEngineClient}.
	 * This method returnes a client builder accoding to the given {@link ClientBuilderFactory}
	 * which you can set via {@link #setClientBuilderFactory(ClientBuilderFactory)}
	 * 
	 * @return null if no {@link ClientBuilderFactory} is set.
	 */
	public AbstractClientBuilder createNewClientBuilder();
}
