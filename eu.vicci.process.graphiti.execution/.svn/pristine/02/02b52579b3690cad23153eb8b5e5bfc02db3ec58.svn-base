package eu.vicci.process.graphiti.execution.ui;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Dialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

import eu.vicci.process.graphiti.execution.interpreter.DataTypeInstanceCreator;
import eu.vicci.process.model.sofia.StartDataPort;
import eu.vicci.process.model.sofiainstance.DataTypeInstance;

public class SetPortValuesDialog extends Dialog {
	private final Color red;
	private final Color white;

	private SetPortValuesDialogResult result;
	private TableViewer tableViewer;
	private DataTypeInstanceCreator creator;

	public SetPortValuesDialog(Shell parent, DataTypeInstanceCreator creator) {
		this(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.RESIZE | SWT.ICON_QUESTION, creator);		
	}
	
	public SetPortValuesDialog(Shell parent, int style, DataTypeInstanceCreator creator) {
		super(parent, style);	
		this.creator = creator;
		setText("Set Start Values");
		red = parent.getDisplay().getSystemColor(SWT.COLOR_RED);
		white = parent.getDisplay().getSystemColor(SWT.COLOR_WHITE);
	}	
	
	public SetPortValuesDialogResult open(List<StartDataPort> startDataPorts){
	    Shell shell = new Shell(getParent(), getStyle());
	    createContents(shell);
	    fillTable(startDataPorts);
	    shell.pack();
	    shell.open();
	    Display display = getParent().getDisplay();
	    
	    while (!shell.isDisposed())
	      if (!display.readAndDispatch()) 
	        display.sleep();
		
		return result;		
	}
	
	private void fillTable(List<StartDataPort> startDataPorts){
		tableViewer.setContentProvider(ArrayContentProvider.getInstance());
		tableViewer.setInput(startDataPorts.toArray());
	}
	
	private void createContents(final Shell shell){
		shell.setLayout(new GridLayout(2, true));
		createTable(shell);
		createButtons(shell);				
	}
	
	private void createTable(Shell shell){
		tableViewer = new StartValuesTableViewer(shell);		
		GridData gridData = new GridData(SWT.FILL, SWT.BEGINNING, true, true);
		gridData.horizontalSpan = 2;
		tableViewer.getTable().setLayoutData(gridData);		
	}
	
	private void createButtons(final Shell shell){
		//OK Button
		GridData dataOk = new GridData();
		Button okBtn = new Button(shell, SWT.PUSH);
		okBtn.setText("Ok");
		okBtn.setLayoutData(dataOk);
		okBtn.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				Map<String, DataTypeInstance> dataInstances = getDataInstances();
				if(dataInstances == null)
					return; //in this case - not all values are set
				result = new SetPortValuesDialogResult(dataInstances, false);
				shell.close();
			}
		});

		//Cancel Button
		GridData dataCancel = new GridData();
		Button cancelBtn = new Button(shell, SWT.PUSH);
		cancelBtn.setText("Cancel");	
		cancelBtn.setLayoutData(dataCancel);
		cancelBtn.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				result = new SetPortValuesDialogResult(null, true);
				shell.close();
			}
		});			
	}
	
	private Map<String, DataTypeInstance> getDataInstances(){
		Map<String, DataTypeInstance> startValues = new HashMap<String, DataTypeInstance>();
		Object[] ports = (Object[])tableViewer.getInput();
		
		if(ports == null)
			return null;
		for (int i = 0; i < ports.length; i++) {
			StartDataPort port = (StartDataPort)ports[i];
			DataTypeInstance dti = creator.createDataTypeInstance(port);
			if(!validate(dti, i))
				return null;
			startValues.put(dti.getTypeId(), dti);
		}
		return startValues;		
	}
	
	private boolean validate(DataTypeInstance dti, int index){
		if(dti != null){
			tableViewer.getTable().getItem(index).setBackground(white);
			return true;
		}
		tableViewer.getTable().getItem(index).setBackground(red);
		return false;		
	}	
}
