package eu.vicci.process.graphiti.execution.launch;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.debug.core.DebugException;
import org.eclipse.debug.core.ILaunch;
import org.eclipse.debug.core.ILaunchConfiguration;
import org.eclipse.debug.core.model.ILaunchConfigurationDelegate2;
import org.eclipse.emf.common.util.URI;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import eu.vicci.process.graphiti.execution.Activator;
import eu.vicci.process.graphiti.execution.debug.ProcessDebugger;
import eu.vicci.process.graphiti.execution.debug.dispatcher.EventDispatchJob;
import eu.vicci.process.graphiti.execution.debug.model.ProcessDebugTarget;
import eu.vicci.process.graphiti.execution.interpreter.ProcessInterpreter;
import eu.vicci.process.graphiti.execution.interpreter.ProcessInterpreterConfig;
import eu.vicci.process.graphiti.execution.ui.ExecuteProcessEditor;
import eu.vicci.process.graphiti.execution.ui.ExecuteProcessEditorInput;
import eu.vicci.process.graphiti.execution.util.StringResource;

/**
 * Delegate for launching a process execution
 */
public class ExecuteProcessConfigurationType implements ILaunchConfigurationDelegate2 {
	private static final Logger logger = LoggerFactory.getLogger(ExecuteProcessConfigurationType.class);
	
	/**
	 * ID for the configuration type {@link ExecuteProcessConfigurationType}
	 */
	public static final String ID = "eu.vicci.process.graphiti.execution.launch.executeProcessConfigurationType";

	@Override
	public void launch(ILaunchConfiguration configuration, String mode, ILaunch launch,
			IProgressMonitor monitor) throws CoreException {
		logger.debug("launched vicci process execution");		
		
		ProcessInterpreterConfig config = new ProcessInterpreterConfig(configuration);
		config.checkConfigValues(logger);
		
		ExecuteProcessEditor editor = openEditor(config.getFile());
		checkEditor(editor);

		ProcessInterpreter interpreter = new ProcessInterpreter(config, editor);
		
		//Debugging uses the eclipse debug framework
		debug(interpreter, editor, launch, config.getFile());	
	}
	
	private void debug(ProcessInterpreter interpreter, ExecuteProcessEditor editor, ILaunch launch, IFile file){
		ProcessDebugTarget debugTarget = new ProcessDebugTarget(launch, file);
		ProcessDebugger debugger = new ProcessDebugger(interpreter);
		interpreter.setDebugger(debugger);
		
		EventDispatchJob dispatcher = new EventDispatchJob(debugTarget, debugger);
		dispatcher.schedule();
		
		debugger.setEventDispatcher(dispatcher);
		debugTarget.setEventDispatcher(dispatcher);
		
		launch.addDebugTarget(debugTarget);
		
		interpreter.init();
		interpreter.schedule();
	}

	@Override
	public ILaunch getLaunch(ILaunchConfiguration configuration, String mode) throws CoreException {
		logger.debug("get ILaunch");
		return null;
	}

	@Override
	public boolean buildForLaunch(ILaunchConfiguration configuration, String mode, IProgressMonitor monitor)
			throws CoreException {
		logger.debug("build for launch");
		return true;
	}

	@Override
	public boolean finalLaunchCheck(ILaunchConfiguration configuration, String mode, IProgressMonitor monitor)
			throws CoreException {
		logger.debug("final launch check");
		return true;
	}

	@Override
	public boolean preLaunchCheck(ILaunchConfiguration configuration, String mode, IProgressMonitor monitor)
			throws CoreException {
		logger.debug("preLaunchCheck");
		return true;
	}
	
	private static ExecuteProcessEditor openEditor(IFile fileToOpen){
	   OpenEditor open = new OpenEditor(fileToOpen);
	   Display.getDefault().syncExec(open);
	   return open.editor;	
	}
	
	private static void checkEditor(ExecuteProcessEditor editor) throws DebugException {
		if(editor != null)			
			return;	
		logger.error(StringResource.ERR_OPEN_EDITOR);
		throw new DebugException(new Status(IStatus.ERROR, Activator.PLUGIN_ID,
				StringResource.ERR_OPEN_EDITOR));
	}
	
	private static class OpenEditor implements Runnable{
		ExecuteProcessEditor editor = null;
		IFile fileToOpen;
		
		public OpenEditor(IFile fileToOpen){
			this.fileToOpen = fileToOpen;
		}

		@Override
		public void run() {
			IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
		    IPath path  = fileToOpen.getFullPath();
		    URI uri = URI.createPlatformResourceURI(path.toString(), true);	 
		    
		    ExecuteProcessEditorInput input = new ExecuteProcessEditorInput(uri);
		    try {
				editor = (ExecuteProcessEditor)page.openEditor(input, ExecuteProcessEditor.EXECUTE_PROCESS_EDITOR_ID);
			} catch (PartInitException e) {
				
			}			
		}		
	}	
}
