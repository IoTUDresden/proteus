package eu.vicci.process.graphiti.execution.ui;

import org.eclipse.jface.viewers.CellEditor;
import org.eclipse.jface.viewers.ColumnLabelProvider;
import org.eclipse.jface.viewers.EditingSupport;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.jface.viewers.TextCellEditor;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;

import eu.vicci.process.model.sofia.StartDataPort;

public class StartValuesTableViewer extends TableViewer {
	//Portname, Value, Typename, Type, Id
	private static final int[] BOUNDS = {100, 100, 200, 200, 200};
	

	public StartValuesTableViewer(Composite parent) {
		super(parent,  SWT.VIRTUAL | SWT.BORDER | SWT.FULL_SELECTION);
		getTable().setHeaderVisible(true);
		createColumns();
	}	
	
	private void createColumns(){
		TableViewerColumn column = createColumn("Portname");
		column.getColumn().setWidth(BOUNDS[0]);
		column.setLabelProvider(new ColumnLabelProvider(){
			@Override
			public String getText(Object element) {
				StartDataPort port = (StartDataPort) element;
				return port.getName();
			}			
		});
		
		column = createColumn("Value");
		column.getColumn().setWidth(BOUNDS[1]);
		column.setEditingSupport(new ValueEditingSupport(this));
		column.setLabelProvider(new ColumnLabelProvider(){
			@Override
			public String getText(Object element) {
				StartDataPort port = (StartDataPort) element;
				return port.getValue();
			}			
		});
		
		column = createColumn("Typename");
		column.getColumn().setWidth(BOUNDS[2]);
		column.setLabelProvider(new ColumnLabelProvider(){
			@Override
			public String getText(Object element) {
				StartDataPort port = (StartDataPort) element;
				return port.getPortDatatype().getName();
			}			
		});
		
		column = createColumn("Type");
		column.getColumn().setWidth(BOUNDS[3]);
		column.setLabelProvider(new ColumnLabelProvider(){
			@Override
			public String getText(Object element) {
				StartDataPort port = (StartDataPort) element;
				return port.getPortDatatype().getClass().getSimpleName();
			}			
		});
		
		column = createColumn("Id");
		column.getColumn().setWidth(BOUNDS[4]);
		column.setLabelProvider(new ColumnLabelProvider(){
			@Override
			public String getText(Object element) {
				StartDataPort port = (StartDataPort) element;
				return port.getId();
			}			
		});
	}
	
	private TableViewerColumn createColumn(String text){
		TableViewerColumn column = new TableViewerColumn(this, SWT.NONE);
		column.getColumn().setText(text);
		column.getColumn().pack();
		return column;
	}
	
	private class ValueEditingSupport extends EditingSupport{
		private final TableViewer viewer;
		private final CellEditor editor;

		public ValueEditingSupport(TableViewer viewer) {
			super(viewer);
		    this.viewer = viewer;
		    this.editor = new TextCellEditor(viewer.getTable());
		}

		@Override
		protected CellEditor getCellEditor(Object element) {
			return editor;
		}

		@Override
		protected boolean canEdit(Object element) {
			return true;
		}

		@Override
		protected Object getValue(Object element) {
			StartDataPort port = (StartDataPort)element;
			return port.getValue();
		}

		@Override
		protected void setValue(Object element, Object value) {
			StartDataPort port = (StartDataPort)element;
			port.setValue(String.valueOf(value));
			viewer.update(port, null);
		}
		
	}

}
