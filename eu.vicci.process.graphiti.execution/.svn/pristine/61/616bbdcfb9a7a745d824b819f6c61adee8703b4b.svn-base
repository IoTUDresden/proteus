package eu.vicci.process.graphiti.execution.interpreter;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.debug.core.DebugException;
import org.eclipse.debug.core.ILaunchConfiguration;
import org.slf4j.Logger;

import eu.vicci.process.graphiti.adapter.core.IEngineAdapterService;
import eu.vicci.process.graphiti.execution.Activator;
import eu.vicci.process.graphiti.execution.launch.LaunchUtil;
import eu.vicci.process.graphiti.execution.launch.VicciMainTab;
import eu.vicci.process.graphiti.execution.util.StringResource;

public class ProcessInterpreterConfig {
	private String vicciUrl;
	private String port;
	private String realm;
	private String namespace;
	private boolean isServer;
	private String adapterName;
	private IFile file;
	private String openHabUrl;
	private boolean runInLoop;
	
	private IEngineAdapterService engineAdapterService;
	
	public ProcessInterpreterConfig(ILaunchConfiguration configuration) throws CoreException{
		adapterName = VicciMainTab.getEngineAdapterFromConfig(configuration);	
		vicciUrl = VicciMainTab.getVicciRuntimeUrlFromConfig(configuration);
		port = VicciMainTab.getPortFromConfig(configuration);
		realm = VicciMainTab.getRealmFromConfig(configuration);
		namespace = VicciMainTab.getNamespaceFromConfig(configuration);
		engineAdapterService = Activator.getEngineAdapterService(adapterName);
		file = LaunchUtil.getSourceFile(configuration);
		openHabUrl = VicciMainTab.getOpenHabUrlFromConfig(configuration);
		runInLoop = VicciMainTab.getrunInLoopFromConfig(configuration);
		isServer = false;
	}
	
	public void checkConfigValues(Logger logger) throws DebugException {
		if(vicciUrl != null && engineAdapterService != null && file != null)
			return;
		logger.error(StringResource.ERR_CONFIG_WRONG);		
		throw new DebugException(new Status(IStatus.ERROR, Activator.PLUGIN_ID,
				StringResource.ERR_CONFIG_WRONG_MSG));		
	}

	public String getVicciUrl() {
		return vicciUrl;
	}

	public void setVicciUrl(String vicciUrl) {
		this.vicciUrl = vicciUrl;
	}

	public IEngineAdapterService getEngineAdapterService() {
		return engineAdapterService;
	}

	public void setEngineAdapterService(IEngineAdapterService engineAdapterService) {
		this.engineAdapterService = engineAdapterService;
	}

	public String getPort() {
		return port;
	}

	public void setPort(String port) {
		this.port = port;
	}

	public String getRealm() {
		return realm;
	}

	public void setRealm(String realm) {
		this.realm = realm;
	}

	public String getNamespace() {
		return namespace;
	}

	public void setNamespace(String namespace) {
		this.namespace = namespace;
	}

	public boolean getIsServer() {
		return isServer;
	}

	public void setIsServer(boolean isServer) {
		this.isServer = isServer;
	}

	public IFile getFile() {
		return file;
	}

	public void setFile(IFile file) {
		this.file = file;
	}

	public String getOpenHabUrl() {
		return openHabUrl;
	}

	public void setOpenHabUrl(String openHabUrl) {
		this.openHabUrl = openHabUrl;
	}

	public boolean isRunInLoop() {
		return runInLoop;
	}

	public void setRunInLoop(boolean runInLoop) {
		this.runInLoop = runInLoop;
	}

}
