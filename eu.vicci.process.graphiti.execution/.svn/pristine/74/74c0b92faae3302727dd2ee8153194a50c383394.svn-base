package eu.vicci.process.graphiti.execution.launch;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.debug.core.ILaunchConfiguration;
import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
import org.eclipse.debug.ui.AbstractLaunchConfigurationTab;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.osgi.framework.InvalidSyntaxException;
import org.osgi.framework.ServiceReference;

import eu.vicci.process.graphiti.adapter.core.IEngineAdapterService;
import eu.vicci.process.graphiti.execution.Activator;
import eu.vicci.process.graphiti.execution.util.StringResource;

public class VicciMainTab extends AbstractLaunchConfigurationTab{
	public static final String TAB_NAME = "Main Runtime Configuration";
	public static final String ID = "eu.vicci.process.graphiti.execution.launch.vicciMainTab";
	
	public static final String CFG_VICCI_RUNTIME_URL = "VicciRuntimeUrl";
	public static final String CFG_OPENHAB_URL = "OpenHabUrl";
	public static final String CFG_ENGINE_ADAPTER_SERVICE = "EngineAdapterService";
	public static final String CFG_FILE = "File";
	public static final String CFG_PROJECT = "Project";
	public static final String CFG_PORT = "Port";
	public static final String CFG_REALM = "Realm";
	public static final String CFG_NAMESPACE = "Namespace";
	public static final String CFG_RUN_IN_LOOP = "RunInLoop";
	
	public static final String DEFAULT_VICCI_RUNTIME_URL = "192.168.2.102";
	public static final String DEFAULT_OPENHAB_URL = "";
	public static final String DEFAULT_ENGINE_ADAPTER_SERVICE  = "Local Process Engine Adapter";
	public static final String DEFAULT_FILE  = "";
	public static final String DEFAULT_PROJECT  = "";
	public static final String DEFAULT_PORT = "8081";
	public static final String DEFAULT_REALM = "vicciRealm";
	public static final String DEFAULT_NAMESPACE = "vicciWs";
	public static final boolean DEFAULT_RUN_IN_LOOP = false;
	
	private List<String> adapterServices = new LinkedList<>();	
	
	//widgets
	private Text fVicciRuntimeUrlText;
	private Text fOpenHabUrlText;
	private Text fFileText;
	private Text fProjectText;
	private Text fPort;
	private Text fRealm;
	private Text fNamespace;
	private CCombo fEngineAdapter;
	private Button fRunInLoop;
	
	private Label portLabel;
	private Label realmLabel;
	private Label namespaceLabel;
	private Label projTextLabel;
	private Label fileTextLabel;
	
	
	/**
	 * Modify listener that simply updates the owning launch configuration dialog.
	 */
	private ModifyListener fBasicModifyListener = new ModifyListener() {
		public void modifyText(ModifyEvent evt) {
			scheduleUpdateJob();
		}
	};	

	/**
	 * @wbp.parser.entryPoint
	 */
	@Override
	public void createControl(Composite parent) {
		Composite comp = new Composite(parent, SWT.NONE);
		setControl(comp);
		comp.setLayout(new FormLayout());
		
		createVicciRuntimeUrlComponent(comp);
		createOpenHabUrlComponent(comp);
		createPortComponent(comp);
		createRealmComponent(comp);
		createNamespaceComponent(comp);
		createAdapterComponent(comp);
		createProjectTextComponent(comp);
		createFileTextComponent(comp);
		createRunInLoopComponent(comp);
		//add more controls here
		
		fillAdapterComponent();
	}

	@Override
	public void setDefaults(ILaunchConfigurationWorkingCopy configuration) {		
		configuration.setContainer(null);
		configuration.setAttribute(CFG_VICCI_RUNTIME_URL, DEFAULT_VICCI_RUNTIME_URL);
		configuration.setAttribute(CFG_OPENHAB_URL, DEFAULT_OPENHAB_URL);
		configuration.setAttribute(CFG_ENGINE_ADAPTER_SERVICE, DEFAULT_ENGINE_ADAPTER_SERVICE);
		configuration.setAttribute(CFG_FILE,  DEFAULT_FILE);
		configuration.setAttribute(CFG_PROJECT, DEFAULT_PROJECT);
		configuration.setAttribute(CFG_PORT, DEFAULT_PORT);
		configuration.setAttribute(CFG_REALM, DEFAULT_REALM);
		configuration.setAttribute(CFG_NAMESPACE, DEFAULT_NAMESPACE);	
		configuration.setAttribute(CFG_RUN_IN_LOOP, DEFAULT_RUN_IN_LOOP);
	}

	@Override
	public void initializeFrom(ILaunchConfiguration configuration) {
		fVicciRuntimeUrlText.setText(getVicciRuntimeUrlFromConfig(configuration));
		fOpenHabUrlText.setText(getOpenHabUrlFromConfig(configuration));
		fProjectText.setText(getProjectFromConfig(configuration));
		fFileText.setText(getFileFromConfig(configuration));
		fPort.setText(getPortFromConfig(configuration));
		fRealm.setText(getRealmFromConfig(configuration));
		fNamespace.setText(getNamespaceFromConfig(configuration));
		fRunInLoop.setSelection(getrunInLoopFromConfig(configuration));

		String adapterName = getStringValueFromConfig(CFG_ENGINE_ADAPTER_SERVICE, DEFAULT_ENGINE_ADAPTER_SERVICE, configuration);
		if(adapterName != null && adapterServices.contains(adapterName))
			fEngineAdapter.setText(adapterName);
	}

	@Override
	public void performApply(ILaunchConfigurationWorkingCopy configuration) {
		configuration.setAttribute(CFG_VICCI_RUNTIME_URL, fVicciRuntimeUrlText.getText());	
		configuration.setAttribute(CFG_OPENHAB_URL, fOpenHabUrlText.getText());
		configuration.setAttribute(CFG_ENGINE_ADAPTER_SERVICE, fEngineAdapter.getText());
		configuration.setAttribute(CFG_FILE, fFileText.getText());
		configuration.setAttribute(CFG_PROJECT, fProjectText.getText());
		configuration.setAttribute(CFG_PORT, fPort.getText());		
		configuration.setAttribute(CFG_REALM, fRealm.getText());
		configuration.setAttribute(CFG_NAMESPACE, fNamespace.getText());
		configuration.setAttribute(CFG_RUN_IN_LOOP, fRunInLoop.getSelection());
	}

	@Override
	public String getName() {
		return TAB_NAME;
	}	
	
	@Override
	public String getId() {
		return ID;
	}	
	
	public static String getStringValueFromConfig(String attribute, String defaultValue, ILaunchConfiguration configuration) {
		String config = defaultValue;
		try {
			config = configuration.getAttribute(attribute, defaultValue);
		} catch (CoreException e) {
			e.printStackTrace();
		}
		return config;		
	}
	
	public static boolean getBooleanValueFromConfig(String attribute, boolean defaultValue, ILaunchConfiguration configuration){
		boolean config = defaultValue;
		try {
			config = configuration.getAttribute(attribute, defaultValue);
		} catch (CoreException e) {
			e.printStackTrace();
		}
		return config;		
	}
	
	public static String getEngineAdapterFromConfig(ILaunchConfiguration configuration){
		return getStringValueFromConfig(CFG_ENGINE_ADAPTER_SERVICE, DEFAULT_ENGINE_ADAPTER_SERVICE, configuration);
	}
	
	public static String getVicciRuntimeUrlFromConfig(ILaunchConfiguration configuration){
		return getStringValueFromConfig(CFG_VICCI_RUNTIME_URL, DEFAULT_VICCI_RUNTIME_URL, configuration);
	}
	
	public static String getFileFromConfig(ILaunchConfiguration configuration){
		return getStringValueFromConfig(CFG_FILE, DEFAULT_FILE, configuration);
	}
	
	public static String getProjectFromConfig(ILaunchConfiguration configuration){
		return getStringValueFromConfig(CFG_PROJECT, DEFAULT_PROJECT, configuration);
	}
	
	public static String getPortFromConfig(ILaunchConfiguration configuration){
		return getStringValueFromConfig(CFG_PORT, DEFAULT_PORT, configuration);
	}
	
	public static String getRealmFromConfig(ILaunchConfiguration configuration){
		return getStringValueFromConfig(CFG_REALM, DEFAULT_REALM, configuration);
	}
	
	public static String getNamespaceFromConfig(ILaunchConfiguration configuration){
		return getStringValueFromConfig(CFG_NAMESPACE, DEFAULT_NAMESPACE, configuration);
	}
	
	public static String getOpenHabUrlFromConfig(ILaunchConfiguration configuration){
		return getStringValueFromConfig(CFG_OPENHAB_URL, DEFAULT_OPENHAB_URL, configuration);
	}
	
	public static boolean getrunInLoopFromConfig(ILaunchConfiguration configuration){
		return getBooleanValueFromConfig(CFG_RUN_IN_LOOP, DEFAULT_RUN_IN_LOOP, configuration);
	}
	
	private void createAdapterComponent(Composite parent){
		fEngineAdapter = new CCombo(parent, SWT.BORDER);
		fEngineAdapter.addModifyListener(fBasicModifyListener);
		fEngineAdapter.setEditable(false);
		Label adapterLabel = new Label(parent, SWT.CENTER);
		adapterLabel.setText("Engine Adapter");

		FormData formData1 = new FormData();
		formData1.top = new FormAttachment(namespaceLabel, 16);
		formData1.left = new FormAttachment(0, 10);
		adapterLabel.setLayoutData(formData1);
		
		FormData formData2 = new FormData();
		formData2.top = new FormAttachment(adapterLabel, 0, SWT.TOP);
		formData2.left = new FormAttachment(adapterLabel, 10);
		formData2.right = new FormAttachment(100, -10);
		fEngineAdapter.setLayoutData(formData2);
		
		adapterLabel.setToolTipText(StringResource.TT_ENGINE_ADAPTER_SERVICE);
		fEngineAdapter.setToolTipText(StringResource.TT_ENGINE_ADAPTER_SERVICE);
	}
	
	private void createVicciRuntimeUrlComponent(Composite parent){
		fVicciRuntimeUrlText = new Text(parent, SWT.SINGLE | SWT.BORDER);	
		fVicciRuntimeUrlText.addModifyListener(fBasicModifyListener);
		Label urlLabel = new Label(parent, SWT.CENTER);
		urlLabel.setText("Vicci Runtime Url");		
		//label data
		FormData formData1 = new FormData();
		formData1.top = new FormAttachment(0, 10);
		formData1.left = new FormAttachment(0, 10);
		urlLabel.setLayoutData(formData1);			
		//text data
		FormData formData2 = new FormData();
		formData2.top = new FormAttachment(urlLabel, 0, SWT.TOP);
		formData2.left = new FormAttachment(urlLabel, 10);
		formData2.right = new FormAttachment(100, -10);
		fVicciRuntimeUrlText.setLayoutData(formData2);
		
		urlLabel.setToolTipText(StringResource.TT_VICCI_RUNTIME_URL);
		fVicciRuntimeUrlText.setToolTipText(StringResource.TT_VICCI_RUNTIME_URL);
	}
	
	private void createOpenHabUrlComponent(Composite parent){
		fOpenHabUrlText = new Text(parent, SWT.SINGLE | SWT.BORDER);	
		fOpenHabUrlText.addModifyListener(fBasicModifyListener);
		Label urlLabel = new Label(parent, SWT.CENTER);
		urlLabel.setText("OpenHAB Runtime Url");
		//label data
		FormData formData1 = new FormData();
		formData1.top = new FormAttachment(fVicciRuntimeUrlText, 10);
		formData1.left = new FormAttachment(0, 10);
		urlLabel.setLayoutData(formData1);			
		//text data
		FormData formData2 = new FormData();
		formData2.top = new FormAttachment(urlLabel, 0, SWT.TOP);
		formData2.left = new FormAttachment(urlLabel, 10);
		formData2.right = new FormAttachment(100, -10);
		fOpenHabUrlText.setLayoutData(formData2);
		
		urlLabel.setToolTipText(StringResource.TT_OPENHAB_URI);
		fOpenHabUrlText.setToolTipText(StringResource.TT_OPENHAB_URI);
	}
	
	private void createPortComponent(Composite parent){
		fPort = new Text(parent, SWT.SINGLE | SWT.BORDER);	
		fPort.addModifyListener(fBasicModifyListener);
		portLabel = new Label(parent, SWT.CENTER);
		portLabel.setText("Port");		
		//label data
		FormData fd_portLabel = new FormData();
		fd_portLabel.top = new FormAttachment(fOpenHabUrlText, 10);
		fd_portLabel.left = new FormAttachment(0, 10);
		portLabel.setLayoutData(fd_portLabel);			
		//text data
		FormData formData2 = new FormData();
		formData2.top = new FormAttachment(portLabel, 0, SWT.TOP);
		formData2.left = new FormAttachment(0, 101);
		formData2.right = new FormAttachment(100, -10);
		fPort.setLayoutData(formData2);		
		
		portLabel.setToolTipText(StringResource.TT_PORT);
		fPort.setToolTipText(StringResource.TT_PORT);
	}
	
	private void createRealmComponent(Composite parent){
		fRealm = new Text(parent, SWT.SINGLE | SWT.BORDER);	
		fRealm.addModifyListener(fBasicModifyListener);
		realmLabel = new Label(parent, SWT.CENTER);
		realmLabel.setText("Realm");		
		//label data
		FormData fd_realmLabel = new FormData();
		fd_realmLabel.top = new FormAttachment(portLabel, 16);
		fd_realmLabel.left = new FormAttachment(0, 10);
		realmLabel.setLayoutData(fd_realmLabel);			
		//text data
		FormData formData2 = new FormData();
		formData2.left = new FormAttachment(realmLabel, 58);
		formData2.top = new FormAttachment(realmLabel, 0, SWT.TOP);
		formData2.right = new FormAttachment(100, -10);
		fRealm.setLayoutData(formData2);
		
		realmLabel.setToolTipText(StringResource.TT_REALM);
		fRealm.setToolTipText(StringResource.TT_REALM);
	}
	
	private void createNamespaceComponent(Composite parent){
		fNamespace = new Text(parent, SWT.SINGLE | SWT.BORDER);	
		fNamespace.addModifyListener(fBasicModifyListener);
		namespaceLabel = new Label(parent, SWT.CENTER);
		namespaceLabel.setText("Namespace");		
		//label data
		FormData fd_namespaceLabel = new FormData();
		fd_namespaceLabel.top = new FormAttachment(realmLabel, 16);
		fd_namespaceLabel.left = new FormAttachment(0, 10);
		namespaceLabel.setLayoutData(fd_namespaceLabel);			
		//text data
		FormData formData2 = new FormData();
		formData2.left = new FormAttachment(namespaceLabel, 29);
		formData2.top = new FormAttachment(namespaceLabel, 0, SWT.TOP);
		formData2.right = new FormAttachment(100, -10);
		fNamespace.setLayoutData(formData2);
		
		namespaceLabel.setToolTipText(StringResource.TT_NAMESPACE);
		fNamespace.setToolTipText(StringResource.TT_NAMESPACE);
	}
	
	private void createFileTextComponent(Composite parent){
		fFileText = new Text(parent, SWT.SINGLE | SWT.BORDER);
		fileTextLabel = new Label(parent, SWT.CENTER);
		fileTextLabel.setText("File");
		
		FormData fd_fileTextLabel = new FormData();
		fd_fileTextLabel.top = new FormAttachment(projTextLabel, 16);
		fd_fileTextLabel.left = new FormAttachment(0, 10);
		fileTextLabel.setLayoutData(fd_fileTextLabel);			
		//text data
		FormData formData2 = new FormData();
		formData2.left = new FormAttachment(fileTextLabel, 73);
		formData2.top = new FormAttachment(fileTextLabel, 0, SWT.TOP);
		formData2.right = new FormAttachment(100, -10);
		fFileText.setLayoutData(formData2);	
	}
	
	private void createProjectTextComponent(Composite parent){
		fProjectText = new Text(parent, SWT.SINGLE | SWT.BORDER);
		projTextLabel = new Label(parent, SWT.CENTER);
		projTextLabel.setText("Project");
		
		FormData fd_projTextLabel = new FormData();
		fd_projTextLabel.top = new FormAttachment(fEngineAdapter, 10);
		fd_projTextLabel.left = new FormAttachment(0, 10);
		projTextLabel.setLayoutData(fd_projTextLabel);			
		//text data
		FormData formData2 = new FormData();
		formData2.left = new FormAttachment(projTextLabel, 54);
		formData2.top = new FormAttachment(projTextLabel, 0, SWT.TOP);
		formData2.right = new FormAttachment(100, -10);
		fProjectText.setLayoutData(formData2);		
	}
	
	private void createRunInLoopComponent(Composite parent) {
		fRunInLoop = new Button(parent, SWT.CHECK);
		fRunInLoop.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				scheduleUpdateJob();
			}
		});
		Label runInLoopLabel = new Label(parent, SWT.CENTER);
		runInLoopLabel.setText("Run in Loop");
		
		FormData formData1 = new FormData();
		formData1.top = new FormAttachment(fileTextLabel, 16);
		formData1.left = new FormAttachment(0, 10);
		runInLoopLabel.setLayoutData(formData1);			
		//text data
		FormData formData2 = new FormData();
		formData2.top = new FormAttachment(runInLoopLabel, 0, SWT.TOP);
		formData2.left = new FormAttachment(runInLoopLabel, 10);
		formData2.right = new FormAttachment(100, -10);
		fRunInLoop.setLayoutData(formData2);	
		
		runInLoopLabel.setToolTipText(StringResource.TT_RUN_IN_LOOP);
		fRunInLoop.setToolTipText(StringResource.TT_RUN_IN_LOOP);
	}
	
	private void fillAdapterComponent() {
		Collection<ServiceReference<IEngineAdapterService>> services = null;
		try {
			services = Activator.getDefault().getBundle().getBundleContext()
					.getServiceReferences(IEngineAdapterService.class, null);
			
			for (ServiceReference<IEngineAdapterService> serviceReference : services) {			
				IEngineAdapterService service = serviceReference.getBundle().getBundleContext()
						.getService(serviceReference);
				fEngineAdapter.add(service.getAdapterName());
				adapterServices.add(service.getAdapterName());
			}
			
		} catch (InvalidSyntaxException e) {
			e.printStackTrace();
		}
	}	
}
