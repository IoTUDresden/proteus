package eu.vicci.process.graphiti.execution.interpreter;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.runtime.jobs.Job;
import org.eclipse.emf.common.command.CommandStack;
import org.eclipse.emf.transaction.RecordingCommand;
import org.eclipse.graphiti.mm.algorithms.GraphicsAlgorithm;
import org.eclipse.graphiti.mm.algorithms.styles.AbstractStyle;
import org.eclipse.graphiti.mm.algorithms.styles.Color;
import org.eclipse.graphiti.mm.pictograms.Diagram;
import org.eclipse.graphiti.mm.pictograms.Shape;
import org.eclipse.graphiti.services.Graphiti;
import org.eclipse.graphiti.util.IColorConstant;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import eu.vicci.process.graphiti.execution.ui.ExecuteProcessEditor;
import eu.vicci.process.model.sofiainstance.State;

public abstract class AbstractProcessInterpreter extends Job {
	protected static final Logger logger = LoggerFactory.getLogger(AbstractProcessInterpreter.class);
	private static final String name = "Process Runner";

	protected final ExecuteProcessEditor editor;	
	private final Map<IColorConstant, Color> colors = new HashMap<IColorConstant, Color>(); 

	public AbstractProcessInterpreter(ExecuteProcessEditor editor) {
		super(name);
		this.editor = editor;
	}
	
	public void init(){
		logger.debug("initializing process runner");
		setColors();
	}
	
	protected void changeBorderColor(final Shape shape, final Color color) {
		CommandStack stack = editor.getEditingDomain().getCommandStack();	
		stack.execute(new RecordingCommand(editor.getEditingDomain()) {
			@Override
			protected void doExecute() {
				GraphicsAlgorithm ga = shape.getGraphicsAlgorithm();		
				if (ga instanceof AbstractStyle)
					((AbstractStyle) ga).setForeground(color);
			}
		});
	}

	protected Color getStateColor(State state) {
		switch (state) {
		case INACTIVE:
			 return colors.get(IColorConstant.BLACK);
		case EXECUTING:
			 return colors.get(IColorConstant.YELLOW);			
		case ACTIVE:
			 return colors.get(IColorConstant.BLUE);
		case EXECUTED:
			return colors.get(IColorConstant.GREEN);
		case DEACTIVATED:
			return colors.get(IColorConstant.ORANGE);
		default:
			return colors.get(IColorConstant.RED);
		}
	}
	
	protected Diagram getDiagram(){
		return editor.getDiagramTypeProvider().getDiagram();
	}
	
	//must get the colors within a transaction. Otherwise illegalStateException is thrown
	private void setColor(final IColorConstant colorConstant){
		CommandStack stack = editor.getEditingDomain().getCommandStack();	
		stack.execute(new RecordingCommand(editor.getEditingDomain()) {
			@Override
			protected void doExecute() {
				Color color = Graphiti.getGaService().manageColor(getDiagram(), colorConstant);
				colors.put(colorConstant, color);				
			}
		});		
	}
	
	private void setColors(){
		setColor(IColorConstant.BLACK);
		setColor(IColorConstant.YELLOW);		
		setColor(IColorConstant.BLUE);		
		setColor(IColorConstant.GREEN);
		setColor(IColorConstant.ORANGE);		
		setColor(IColorConstant.RED);				
	}

}
