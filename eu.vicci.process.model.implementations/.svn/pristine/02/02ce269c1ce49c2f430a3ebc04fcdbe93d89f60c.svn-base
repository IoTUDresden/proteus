package eu.vicci.process.openhab.util;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.UriBuilder;

import org.glassfish.jersey.media.sse.EventListener;
import org.glassfish.jersey.media.sse.EventSource;
import org.glassfish.jersey.media.sse.InboundEvent;
import org.glassfish.jersey.media.sse.SseFeature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OpenHabEventProvider {
	private static final Logger logger = LoggerFactory.getLogger(OpenHabEventProvider.class);

	public static final String EVENTS_PATH = "/rest/events";

	private List<EventSource> eventSources = new ArrayList<>();
	private final String serverBasePath;
	private Client client;

	public OpenHabEventProvider(String serverBasePath) {
		this.serverBasePath = serverBasePath;
		client = ClientBuilder.newBuilder().register(SseFeature.class).build();
	}

	/**
	 * Register a listener to OpenHab and receive only updates (e.g. temperature changed
	 * from 25 to 26 degrees).
	 * 
	 * Registers to event: smarthome/update
	 * 
	 * @param listener
	 */
	public void registerToUpdates(EventListener listener) {
		String eventName = getEventNameWithoutLastSlash(OpenHabEventTopics.ITEM_STATE_UPDATE);
		URI uri = UriBuilder.fromPath(serverBasePath)
				.path(EVENTS_PATH)
				.queryParam("topics", eventName)
				.build();
		logger.debug("register to events on uri: {}", uri.toString());
		registerTo(uri, listener);
	}

	/**
	 * Register a listener to OpenHab and receive all possible events from OpenHab (e.g. temperature changed
	 * from 25 to 26 degrees, an item was added/removed....).
	 * 
	 * @param listener
	 */
	public void registerToAllEvents(EventListener listener) {
		URI uri = UriBuilder.fromPath(serverBasePath).path(EVENTS_PATH).build();
		logger.debug("register to events on uri: {}", uri.toString());
		registerTo(uri, listener);
	}

	/**
	 * Closes all event sources to which this provides is connected
	 */
	public void closeAllEventSources() {
		for (EventSource eventSource : eventSources)
			if (eventSource.isOpen())
				eventSource.close();
		eventSources.clear();
	}
	
	private void registerTo(URI uri, EventListener listener){
		WebTarget target = client.target(uri);
		EventSource eventSource = new EventSource(target, false) {
			@Override
			public void onEvent(InboundEvent inboundEvent) {
				logger.debug("received event:\n   name: {}\n   data: {}\n", inboundEvent.getName(),
						inboundEvent.readData(String.class));
			}
		};
		eventSource.register(listener);
		eventSource.open();
		eventSources.add(eventSource);		
	}
	
	private String getEventNameWithoutLastSlash(String eventName){
		if(!eventName.endsWith("/"))
			return eventName;
		int tmp = eventName.lastIndexOf("/");
		return eventName.substring(0, tmp);
	}
}
