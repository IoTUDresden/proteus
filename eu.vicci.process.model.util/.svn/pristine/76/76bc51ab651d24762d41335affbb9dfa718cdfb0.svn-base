package eu.vicci.process.model.util.serialization.jsonprocessstepinstances;

import org.codehaus.jackson.map.annotate.JsonDeserialize;

import com.fasterxml.jackson.annotation.JsonTypeInfo;

import eu.vicci.process.model.sofiainstance.FalseTransitionInstance;
import eu.vicci.process.model.sofiainstance.SofiaInstanceFactory;
import eu.vicci.process.model.sofiainstance.TransitionInstance;
import eu.vicci.process.model.sofiainstance.TrueTransitionInstance;
import eu.vicci.process.model.util.serialization.jsonprocessstepinstances.core.IJSONPortInstance;
import eu.vicci.process.model.util.serialization.jsonprocessstepinstances.core.IJSONTransitionInstance;

@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = "@class")
public class JSONTransitionInstance implements IJSONTransitionInstance {
	private String instanceId;
	private int instanceNumber;
	private String type;
	
	@JsonDeserialize(as=JSONPortInstance.class)
	private IJSONPortInstance sourcePortInstance;
	@JsonDeserialize(as=JSONPortInstance.class)
	private IJSONPortInstance targetPortInstance;
	
	public JSONTransitionInstance() {
		super();
	}

	public JSONTransitionInstance(TransitionInstance transition) {
		instanceId = transition.getInstanceId();
		JSONProcessStepInstanceSerializer.alreadySerialized.put(instanceId, this);
		instanceNumber = transition.getInstancenumber();
		
		if(JSONProcessStepInstanceSerializer.alreadySerialized.containsKey(transition.getSourcePortInstance().getInstanceId()))
			sourcePortInstance = (IJSONPortInstance) JSONProcessStepInstanceSerializer.alreadySerialized.get(transition.getSourcePortInstance().getInstanceId());
		else
			sourcePortInstance = new JSONPortInstance(transition.getSourcePortInstance());
		
		if(JSONProcessStepInstanceSerializer.alreadySerialized.containsKey(transition.getTargetPortInstance().getInstanceId()))
			targetPortInstance = (IJSONPortInstance) JSONProcessStepInstanceSerializer.alreadySerialized.get(transition.getTargetPortInstance().getInstanceId());
		else
			targetPortInstance = new JSONPortInstance(transition.getTargetPortInstance());
		
		type = transition.getClass().getCanonicalName();
	}
	
	@Override
	public TransitionInstance makeTransitionInstance(SofiaInstanceFactory factory){
		TransitionInstance transition = null;
		if(JSONProcessStepInstanceSerializer.alreadyInstanciated.containsKey(instanceId))
			return (TransitionInstance) JSONProcessStepInstanceSerializer.alreadyInstanciated.get(instanceId);
		
		if(type.equals(TrueTransitionInstance.class.getCanonicalName()))
			transition = factory.createTrueTransitionInstance();
		if(type.equals(FalseTransitionInstance.class.getCanonicalName()))
			transition = factory.createFalseTransitionInstance();
		else
			transition = factory.createTransitionInstance();
		
		transition.setInstanceId(instanceId);
		transition.setInstancenumber(instanceNumber);
		transition.setSourcePortInstance(sourcePortInstance.makePortInstance(factory));
		transition.setTargetPortInstance(targetPortInstance.makePortInstance(factory));
		
		JSONProcessStepInstanceSerializer.alreadyInstanciated.put(instanceId, transition);
		return transition;		
	}

}
